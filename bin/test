#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

@options = {}

def process_argv(option)
  case option
  when '-h', '--help'
    puts 'Run the tests.'
    puts '  -u, --unit    Run unit tests'
    puts '  -s, --system  Run system tests'
    puts '  -l, --lint    Run linters and formatters'
    puts '  --no-lint     Disable linters and formatters'
    puts '  --no-fix      Lint and format without autocorrection'
    exit
  when '-u', '--unit'
    @options[:unit_only] = true
  when '-s', '--system'
    @options[:system_only] = true
  when '-l', '--lint'
    @options[:lint_only] = true
  when '--no-lint'
    @options[:without_lint] = true
  when '--no-fix'
    @options[:without_fix] = true
  end
end

ARGV.each { |option| process_argv(option) }

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

FileUtils.chdir APP_ROOT do
  # This script is a way to run the tests and linters.
  # Add necessary test steps to this file.

  puts "\n== Preparing database =="
  system! 'bin/rails db:test:prepare'

  puts "\n== Building assets =="
  system! 'bin/yarn run build'

  if @options[:unit_only]
    puts "\n== Running unit tests =="
    system! 'bin/rails test'
  elsif @options[:system_only]
    puts "\n== Running system tests =="
    system! 'bin/rails test:system'
  elsif @options[:lint_only]
    # Do nothing
  else
    puts "\n== Running all tests =="
    system! 'bin/rails test:all'
  end

  unless @options[:without_lint]
    if @options[:without_fix]
      puts "\n== Running formatters and linters =="
      system! 'bin/yarn run format:check'
      system! 'bin/bundle exec rubocop'
    else
      puts "\n== Running formatters and linters (in autocorrect mode) =="
      system! 'bin/yarn run format'
      system! 'bin/bundle exec rubocop --autocorrect'
    end
  end
end
