---
http_interactions:
  - request:
      method: get
      uri: https://www.outsavvy.com/organiser/sappho-events
      body:
        encoding: US-ASCII
        string: ""
      headers:
        Accept-Encoding:
          - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
        Accept:
          - "*/*"
        User-Agent:
          - Ruby
    response:
      status:
        code: 200
        message: OK
      headers:
        Connection:
          - keep-alive
        Cache-Control:
          - private
        Content-Type:
          - text/html; charset=utf-8
        Set-Cookie:
          - OutSavvySession=b4ruq0ce31kwdwhu4t0u2x4g; domain=outsavvy.com; path=/; secure;
            HttpOnly; SameSite=None
        X-Frame-Options:
          - SAMEORIGIN
        X-Content-Type-Options:
          - nosniff
        X-Xss-Protection:
          - 1; mode=block
        Accept-Ranges:
          - bytes
        Date:
          - Wed, 26 Oct 2022 16:04:43 GMT
        Via:
          - 1.1 varnish
        X-Served-By:
          - cache-lhr7338-LHR
        X-Cache:
          - MISS
        X-Cache-Hits:
          - "0"
        X-Timer:
          - S1666800283.818640,VS0,VE1005
        Vary:
          - Accept-Encoding
        Strict-Transport-Security:
          - max-age=31557600
        Transfer-Encoding:
          - chunked
      body:
        encoding: ASCII-8BIT
        string: !binary |-
          

<!DOCTYPE html>
<!--[if lt IE 7]> 				<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" class="ie ie6 lte9 lte8 lte7 ">	<![endif]-->
<!--[if IE 7]>					<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" class="ie ie7 lte9 lte8 lte7 ">	<![endif]-->
<!--[if IE 8]>					<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" class="ie ie8 lte9 lte8 ">		<![endif]-->
<!--[if IE 9]>					<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" class="ie ie9 lte9 ">				<![endif]-->
<!--[if (gt IE 9)|!(IE)]><!-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<!--<![endif]-->
<head id="Head1"><title>
	OutSavvy - Sappho Events tickets and events. Book tickets instantly via the OutSavvy app or website for Sappho Events
</title>

    <script type="text/javascript" src="https://app.termly.io/embed.min.js" data-auto-block="off" data-website-uuid="0fa47c1a-eb0a-4d3b-a5b7-00b1f054f02b"></script>

    <link rel="stylesheet" type="text/css" href="/combres.axd/siteCss/fe83179a979e1de17e6d84aa1c4dd24102376eda6522018586231e96ede27ef768cd21070eee8f50d493c65462232989bc1cf0d801660a9709e4992ebdc4537a/"/><script type="text/javascript" src="/combres.axd/siteJs/af67866fc51387c23df31a326ddad395e6ab81e1ba75c4eb171e287bb90e3530b4ad7531f952c492face85bff8b5c24394cc03df11fa9ce24d4713274d0e6dc7/"></script>
    <meta name="Priority" content="1.0" />
    <meta name="ChangeFrequency" content="daily" />

    <meta name="ROBOTS" content="INDEX, FOLLOW" />

    <meta property="og:description" content="Sappho Events events, tickets, details and more. Book events instantly via the OutSavvy app or website for Sappho Events and buy Sappho Events tickets" />
    <meta property="og:title" content="Sappho Events Book Tickets | Sappho Events Buy Tickets | Sappho Events Events" />
    <meta name="twitter:title" content="Book events instantly via the OutSavvy app or website for Sappho Events" />

    <meta property="og:locale" content="en_GB" />
    <meta property="og:locale:alternate" content="en_US" />
    <meta property="og:site_name" content="OutSavvy" />
    <meta property="og:type" content="website" />

    <meta property="og:url" content="https://www.outsavvy.com/organiser/sappho-events" />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:image:width" content="400" />
    <meta property="og:image:height" content="283" />

    <meta name="twitter:card" content="summary" />
    <meta name="twitter:site" content="@OutSavvy" />

    <meta name="twitter:app:name:iphone" content="OutSavvy" />
    <meta name="twitter:app:id:iphone" content="722344276" />

    <meta property="og:image" content="https://cdn.outsavvy.com/logo/a901aaa2-148e-4793-8d34-a69bd5886dc8.png" />
    <meta property="twitter:image:src" content="https://cdn.outsavvy.com/logo/a901aaa2-148e-4793-8d34-a69bd5886dc8.png" />

    <link href="https://www.outsavvy.com/organiser/sappho-events" rel="canonical" />

<link rel="apple-touch-icon" sizes="57x57" href="https://cdn.outsavvy.com/website/favicon/apple-icon-57x57.png" /><link rel="apple-touch-icon" sizes="60x60" href="https://cdn.outsavvy.com/website/favicon/apple-icon-60x60.png" /><link rel="apple-touch-icon" sizes="72x72" href="https://cdn.outsavvy.com/website/favicon/apple-icon-72x72.png" /><link rel="apple-touch-icon" sizes="76x76" href="https://cdn.outsavvy.com/website/favicon/apple-icon-76x76.png" /><link rel="apple-touch-icon" sizes="114x114" href="https://cdn.outsavvy.com/website/favicon/apple-icon-114x114.png" /><link rel="apple-touch-icon" sizes="120x120" href="https://cdn.outsavvy.com/website/favicon/apple-icon-120x120.png" /><link rel="apple-touch-icon" sizes="144x144" href="https://cdn.outsavvy.com/website/favicon/apple-icon-144x144.png" /><link rel="apple-touch-icon" sizes="152x152" href="https://cdn.outsavvy.com/website/favicon/apple-icon-152x152.png" /><link rel="apple-touch-icon" sizes="180x180" href="https://cdn.outsavvy.com/website/favicon/apple-icon-180x180.png" /><link rel="icon" type="image/png" sizes="192x192" href="https://cdn.outsavvy.com/website/favicon/android-icon-192x192.png" /><link rel="icon" type="image/png" sizes="32x32" href="https://cdn.outsavvy.com/website/favicon/favicon-32x32.png" /><link rel="icon" type="image/png" sizes="96x96" href="https://cdn.outsavvy.com/website/favicon/favicon-96x96.png" /><link rel="icon" type="image/png" sizes="16x16" href="https://cdn.outsavvy.com/website/favicon/favicon-16x16.png" /><link rel="shortcut icon" href="https://cdn.outsavvy.com/website/favicon/favicon.ico" /><link rel="manifest" href="/manifest.json" /><meta name="apple-mobile-web-app-title" content="OutSavvy" /><meta name="application-name" content="OutSavvy" /><meta name="msapplication-TileColor" content="#ffffff" /><meta name="msapplication-TileImage" content="/ms-icon-144x144.png" /><meta name="theme-color" content="#ffffff" /><meta name="google-play-app" content="app-id=com.outsavvyapp" /><meta name="apple-itunes-app" content="app-id=722344276" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" /><meta property="fb:app_id" content="179821335543821" />

    <script type="text/javascript">

        $(document).ready(function () {

            $('#tab-container').easytabs();

        });

    </script>

    <script type="text/javascript" src="/combres.axd/eventJs/fc3601143acd977438c1a5f510610e27c13d52eefa8185d86eac33f5d4a05526e8b947b36d3bb3178109ef992afcfa9e70e9653fd627299cb88f15d3c827660a/"></script>
<meta name="description" content="Sappho Events ticket shop, events, tickets, details and more. Discover events by Sappho Events and book Sappho Events tickets quickly and securely" /></head>
<body>

    

    <form method="post" action="/organiser/sappho-events" id="Form1">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />

<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="E2C812CC" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="4xfb1SJZYB8EFvMSjq3mGIL1lAr0A/HAN7nMTPO7JMegeRcID4IbFHN0UdPeCyDPJ39Skd8T8cQNonm37IBf8PsvurGQM2JOw0/LwaQkWH196IBD/LDEiwYKRXTh4Oqh3Pts3g==" />
        
        <div id="page" class="partner">
            <div id="page-wrapper">
                <div >

                    <div id="header" class="">

                        

<nav class="search-nav">
    <div class="search-bar">

        <a href="/">
            <img itemprop="logo" class="logomobile" src="https://cdn.outsavvy.com/website/icon.png" alt="OutSavvy - Discover events and book tickets. Buy tickets quickly and securely" />
            <img itemprop="logo" class="logo" src="https://cdn.outsavvy.com/website/outsavvylogo-new.png" alt="OutSavvy - Discover events and book tickets. Buy tickets quickly and securely" />
        </a>

        <div class="search-box-holder">
            <div class="search-box-size">
                <div class="search-box">
                    <input name="ctl00$MainNav$ctl00" type="text" class="predicitvesearch" placeholder="Event, keyword, performer..." />

                    <svg viewBox="0 0 502.173 502.173" width="22" height="22" class="header-svg-icon svg-icon">
                        <g xmlns="http://www.w3.org/2000/svg">
                            <g>
                                <g>
                                    <path d="M494.336,443.646L316.402,265.713c20.399-31.421,30.023-68.955,27.189-106.632     C340.507,118.096,322.783,79.5,293.684,50.4C261.167,17.884,217.984,0,172.023,0c-0.222,0-0.445,0.001-0.668,0.001     C125.149,0.176,81.837,18.409,49.398,51.342c-66.308,67.316-65.691,176.257,1.375,242.85     c29.112,28.907,67.655,46.482,108.528,49.489c37.579,2.762,75.008-6.867,106.343-27.21l177.933,177.932     c5.18,5.18,11.984,7.77,18.788,7.77s13.608-2.59,18.789-7.769l13.182-13.182C504.695,470.862,504.695,454.006,494.336,443.646z      M480.193,467.079l-13.182,13.182c-2.563,2.563-6.73,2.561-9.292,0L273.914,296.456c-1.936-1.937-4.497-2.929-7.074-2.929     c-2.044,0-4.098,0.624-5.858,1.898c-60.538,43.788-143.018,37.3-196.118-15.425C5.592,221.146,5.046,124.867,63.646,65.377     c28.67-29.107,66.949-45.222,107.784-45.376c0.199,0,0.392-0.001,0.591-0.001c40.617,0,78.785,15.807,107.52,44.542     c53.108,53.108,59.759,135.751,15.814,196.509c-2.878,3.979-2.441,9.459,1.032,12.932l183.806,183.805     C482.755,460.35,482.755,464.517,480.193,467.079z" />
                                    <path d="M259.633,84.449c-48.317-48.316-126.935-48.316-175.253,0c-23.406,23.406-36.296,54.526-36.296,87.627     c0,33.102,12.89,64.221,36.296,87.627S138.906,296,172.007,296c33.102,0,64.222-12.891,87.627-36.297     C307.951,211.386,307.951,132.767,259.633,84.449z M245.492,245.561C225.863,265.189,199.766,276,172.007,276     c-27.758,0-53.856-10.811-73.484-30.44c-19.628-19.628-30.438-45.726-30.438-73.484s10.809-53.855,30.438-73.484     c20.262-20.263,46.868-30.39,73.484-30.39c26.61,0,53.227,10.133,73.484,30.39C286.011,139.112,286.011,205.042,245.492,245.561z     " />
                                    <path d="M111.017,153.935c1.569-5.296-1.452-10.861-6.747-12.43c-5.294-1.569-10.86,1.451-12.429,6.746     c-8.73,29.459-0.668,61.244,21.04,82.952c1.952,1.952,4.512,2.929,7.071,2.929s5.118-0.977,7.071-2.928     c3.905-3.906,3.905-10.238,0-14.143C110.506,200.544,104.372,176.355,111.017,153.935z" />
                                    <path d="M141.469,94.214c-10.748,4.211-20.367,10.514-28.588,18.735c-3.905,3.906-3.905,10.238,0,14.143     c1.952,1.952,4.512,2.929,7.071,2.929s5.118-0.977,7.07-2.929c6.26-6.26,13.575-11.057,21.741-14.255     c5.143-2.015,7.678-7.816,5.664-12.959C152.413,94.735,146.611,92.202,141.469,94.214z" />
                                </g>
                            </g>
                        </g>
                    </svg>

                    <div class="search-icon-close" onclick="closeForm()">
                        <svg width="18" height="18" viewBox="0 0 18 18" color="inherit" class="header-svg-icon svg-icon">
                            <path d="M16 14.7l-5.6-5.6L16 3.5l-1.4-1.4L9 7.7 3.4 2.1 2 3.5l5.6 5.6L2 14.7l1.4 1.4L9 10.5l5.6 5.6z"></path></svg>
                    </div>
                </div>

                <div class="results-holder">
                    <div class="results-list">
                    </div>
                </div>

            </div>
            <div class="search-icon-open" onclick="showSearch()">

                <svg viewBox="0 0 502.173 502.173" width="23" height="23">
                    <g xmlns="http://www.w3.org/2000/svg">
                        <g>
                            <g>
                                <path d="M494.336,443.646L316.402,265.713c20.399-31.421,30.023-68.955,27.189-106.632     C340.507,118.096,322.783,79.5,293.684,50.4C261.167,17.884,217.984,0,172.023,0c-0.222,0-0.445,0.001-0.668,0.001     C125.149,0.176,81.837,18.409,49.398,51.342c-66.308,67.316-65.691,176.257,1.375,242.85     c29.112,28.907,67.655,46.482,108.528,49.489c37.579,2.762,75.008-6.867,106.343-27.21l177.933,177.932     c5.18,5.18,11.984,7.77,18.788,7.77s13.608-2.59,18.789-7.769l13.182-13.182C504.695,470.862,504.695,454.006,494.336,443.646z      M480.193,467.079l-13.182,13.182c-2.563,2.563-6.73,2.561-9.292,0L273.914,296.456c-1.936-1.937-4.497-2.929-7.074-2.929     c-2.044,0-4.098,0.624-5.858,1.898c-60.538,43.788-143.018,37.3-196.118-15.425C5.592,221.146,5.046,124.867,63.646,65.377     c28.67-29.107,66.949-45.222,107.784-45.376c0.199,0,0.392-0.001,0.591-0.001c40.617,0,78.785,15.807,107.52,44.542     c53.108,53.108,59.759,135.751,15.814,196.509c-2.878,3.979-2.441,9.459,1.032,12.932l183.806,183.805     C482.755,460.35,482.755,464.517,480.193,467.079z" />
                                <path d="M259.633,84.449c-48.317-48.316-126.935-48.316-175.253,0c-23.406,23.406-36.296,54.526-36.296,87.627     c0,33.102,12.89,64.221,36.296,87.627S138.906,296,172.007,296c33.102,0,64.222-12.891,87.627-36.297     C307.951,211.386,307.951,132.767,259.633,84.449z M245.492,245.561C225.863,265.189,199.766,276,172.007,276     c-27.758,0-53.856-10.811-73.484-30.44c-19.628-19.628-30.438-45.726-30.438-73.484s10.809-53.855,30.438-73.484     c20.262-20.263,46.868-30.39,73.484-30.39c26.61,0,53.227,10.133,73.484,30.39C286.011,139.112,286.011,205.042,245.492,245.561z     " />
                                <path d="M111.017,153.935c1.569-5.296-1.452-10.861-6.747-12.43c-5.294-1.569-10.86,1.451-12.429,6.746     c-8.73,29.459-0.668,61.244,21.04,82.952c1.952,1.952,4.512,2.929,7.071,2.929s5.118-0.977,7.071-2.928     c3.905-3.906,3.905-10.238,0-14.143C110.506,200.544,104.372,176.355,111.017,153.935z" />
                                <path d="M141.469,94.214c-10.748,4.211-20.367,10.514-28.588,18.735c-3.905,3.906-3.905,10.238,0,14.143     c1.952,1.952,4.512,2.929,7.071,2.929s5.118-0.977,7.07-2.929c6.26-6.26,13.575-11.057,21.741-14.255     c5.143-2.015,7.678-7.816,5.664-12.959C152.413,94.735,146.611,92.202,141.469,94.214z" />
                            </g>
                        </g>
                    </g>
                </svg>

            </div>
        </div>
    </div>
    <ul class="search-nav-browse">
        <li class="search-nav-browse-first"><a href="/guide" tabindex="0" class="search-nav-main-item search-nav-item">Guide</a></li>
        <li class="search-nav-browse-first"><a href="/events" tabindex="0" class="search-nav-main-item search-nav-item">Events</a></li>
        <li class="search-nav-browse-second"><a href="/theapp" tabindex="0" class="search-nav-main-item search-nav-item">App</a></li>
        <li class="search-nav-browse-second"><a href="/support" tabindex="0" class="search-nav-main-item search-nav-item">Support</a></li>
        
        <li class="search-nav-browse-second"><a href="https://partners.outsavvy.com" target="_blank" tabindex="0" class="search-nav-main-item search-nav-item">Add Event</a></li>
        

        <li class="search-nav-drop">
            <div class="search-nav-drop-container" onclick="showNav()">
                <div class="search-nav-drop-button">
                    <span>
                        <svg width="24" height="24" viewBox="0 0 20 20" class="svg-icon">
                            <circle cx="3" cy="10" r="2"></circle><circle cx="17" cy="10" r="2"></circle><circle cx="10" cy="10" r="2"></circle></svg>

                       
                    </span>
                </div>
                <div hidden="" class="dropNav generalNav">
                    <ul class="generalNavList">
                        <li class="generalNavLink"><a href="/guide" tabindex="0" class="generalNavItem search-nav-item">Guide</a></li>
                        <li class="generalNavLink"><a href="/events" tabindex="0" class="generalNavItem search-nav-item">Events</a></li>
                        <li class="generalNavLink"><a href="/theapp" tabindex="0" class="generalNavItem search-nav-item">App</a></li>
                        <li class="generalNavLink"><a href="/support" tabindex="0" class="generalNavItem search-nav-item">Support</a></li>
                        
                        <li class="generalNavLink"><a href="https://partners.outsavvy.com" target="_blank" tabindex="0" class="generalNavItem search-nav-item">Add event</a></li>
                        
                    </ul>
                </div>
            </div>
        </li>

        <li class="user-nav">
            <hr class="nav-hr">
            <div class="user-nav-container">
                
                    <div class="search-nav-drop-container">
                        <div class="search-nav-drop-button">
                            <a href="/accountlogin"><span data-cy="user-avatar-nav" class="user-avatar-nav">
                                <img src="https://cdn.outsavvy.com/website/anonymoususer.jpg" alt="Anonymous User" class="user-avatar-nav-image">
                            </span></a>
                        </div>
                    </div>
                    
                </div>

                
                <ul class="generalNavList">
                    <li class="generalNavLink"><a href="/accountlogin" tabindex="0" class="generalNavItemEnd search-nav-item">Login</a></li>
                </ul>
                
            </div>
        </li>

    </ul>
</nav>


                        <div class="container container-header">
                            

                        </div>
                    </div>

                    
                    <div class="top-header-margin"></div>
                    

                    <!-- HEADER -->

                    


    <div class="partner-header">
        <div class="partner-header-inner">

            <div class="partner-header-bgColour">

                <div class="event-header-image_blurry">
                    <img src="https://cdn.outsavvy.com/partnerbanner/83b0fdb0-f29d-4df4-a8dc-3b851a8a8836.jpg" class="event-header-image" alt="" />
                </div>

                <div class="partner-header-headerBg">
                    <img alt="Sappho Events Banner" src="data:image/svg+xml;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzIDIiPjwvc3ZnPg==" data-src='https://cdn.outsavvy.com/partnerbanner/83b0fdb0-f29d-4df4-a8dc-3b851a8a8836.jpg' />
                </div>

                <div class="partner-header-container">

                    <div class="artist-header" style="padding-top: 0px; right: 0%; max-width: 800px; left: auto;">
                        <!-- Heading -->
                        <h1 style='color: rgb(83, 17, 120);; text-align: right;' class="heading animate fade-in-up-big header-artist">Sappho Events</h1>
                    </div>

                    

                    <div class="partner-header-logo">

                        <div class="partner-header-profilelogo">

                            <img class="partner-header-profilelogo-image" src="https://cdn.outsavvy.com/logo/a901aaa2-148e-4793-8d34-a69bd5886dc8.png" alt="Sappho Events" />

                        </div>

                    </div>

                    
                </div>

            </div>


        </div>
    </div>



                    <div id="section" class="">

                        <div id="PanelMainSection">
	
                            <div class="container clearfix ">
                                

                                <div id="primary" class="partnerpage">
                                    

    <div id="section">

        <div class="container clearfix ">

            <div class="sidebarpartner sidebarpartnerlogo">

                <div class="box outline" style="width: 100%;">

                    <div class="content">

                        

                        <div class="content-wrap">

                            <h5>Follow Sappho Events</h5>

                            <div style="font-size: 12px; margin-bottom: 20px; width: 100%;" class="sharevent jssocials">
                                <div class="jssocials-shares">
                                    
                                    <div class="jssocials-share jssocials-share-facebook">
                                        <a target="_blank" href="https://facebook.com/sapphoeventsuk" class="jssocials-share-link">
                                            <img src="https://cdn.outsavvy.com/website/facebook-icon.png" alt="Facebook icon" class="jssocials-share-logo" /></a>
                                    </div>
                                    
                                    <div class="jssocials-share jssocials-share-instagram">
                                        <a target="_blank" href="https://www.instagram.com/sapphoevents" class="jssocials-share-link">
                                            <img src="https://cdn.outsavvy.com/website/instagram-icon.png" alt="Instagram icon" class="jssocials-share-logo" /></a>
                                    </div>
                                    
                                    <div class="jssocials-share jssocials-share-twitter">
                                        <a target="_blank" href="https://www.twitter.com/sapphoevents" class="jssocials-share-link">
                                            <img src="https://cdn.outsavvy.com/website/twitter-icon.png" alt="Twitter icon" class="jssocials-share-logo" /></a>
                                    </div>
                                    
                                </div>
                            </div>

                        </div>

                        

                        <div class="content-wrap">

                            <h5>Join Sappho Events Mailing List <span class="marker-icon" title="Be the first to hear about new events from Sappho Events. You can unsubscribe at any time." rel="tooltip">
                                <img src="https://cdn.outsavvy.com/website/icon-info.png" />
                            </span></h5>


                            <input type="submit" name="ctl00$MainContent$ButtonJoin" value="Join Mailing List" id="MainContent_ButtonJoin" class="buy-button" style="margin-top: 5px; margin-bottom: 5px;" />

                            

                        </div>

                        

                        <div class="content-wrap">

                            <h5>Sappho Events Website</h5>

                            <h4><a href="http://www.sapphoevents.co.uk" target="_blank">www.sapphoevents.co.uk</a></h4>

                        </div>

                        
                    </div>

                </div>

            </div>
            <!-- container -->

            <div id="primary" style="margin-top: 20px;">

                

                <div style="margin-bottom: 16px">
                    <h2>
                        <span>About Sappho Events</span>
                    </h2>
                </div>


                <div class="review" style="text-align: left;">
                    <p><p>Sappho Events produces events for LGBTQ women and non-binary people in the UK. Our events revolve around common interest activities with a coffee and chat vibe. Our social events encourage making new friends and forming connections with other queer people. We also run dating events for queer women and non-binary people, which will be clearly marked.</p></p>
                </div>

                


                <div style="margin-bottom: 16px">
                    <h2>
                        <span>Share Sappho Events</span>
                    </h2>
                </div>

                <div id="shareevent" style="font-size: 12px; margin-bottom: 20px; width: 100%;" class="sharevent jssocials">
                    <div class="jssocials-shares">
                        <div class="jssocials-share jssocials-share-facebook">
                            <a target="_blank" href="https://facebook.com/sharer/sharer.php" class="jssocials-share-link">
                                <img src="https://cdn.outsavvy.com/website/facebook-icon.png" alt="Facebook icon" class="jssocials-share-logo" /></a>
                        </div>
                        <div class="jssocials-share jssocials-share-twitter">
                            <a target="_blank" href="https://twitter.com/share" class="jssocials-share-link">
                                <img src="https://cdn.outsavvy.com/website/twitter-icon.png" alt="Twitter icon" class="jssocials-share-logo" /></a>
                        </div>
                        <div class="jssocials-share jssocials-share-pinterest">
                            <a target="_blank" href="https://pinterest.com/pin/create/" class="jssocials-share-link">
                                <img src="https://cdn.outsavvy.com/website/pinterest-icon.png" alt="Pinterest icon" class="jssocials-share-logo" /></a>
                        </div>
                        <div class="jssocials-share jssocials-share-email">
                            <a target="_self" href="mailto:?subject=OutSavvy" class="jssocials-share-link">
                                <img src="https://cdn.outsavvy.com/website/email-icon-white.png" alt="Email icon" class="jssocials-share-logo" /></a>
                        </div>
                    </div>
                </div>

                <script type="text/javascript">

                    jsSocials.shares.facebook.countUrl = "https://graph.facebook.com/?id={url}";

                    jsSocials.setDefaults("pinterest", {
                        media: "https://cdn.outsavvy.com/events/a15fa2ba-178d-4524-8ce5-2c7f2910577c.jpg"
                    });

                    $("#shareevent").jsSocials({
                        showLabel: false,
                        showCount: false,
                        shares: [{
                            share: "facebook",
                            logo: "https://cdn.outsavvy.com/website/facebook-icon.png"
                        }, {
                            share: "twitter",
                            logo: "https://cdn.outsavvy.com/website/twitter-icon.png"
                        }, {
                            share: "pinterest",
                            logo: "https://cdn.outsavvy.com/website/pinterest-icon.png"
                        }, {
                            share: "email",
                            logo: "https://cdn.outsavvy.com/website/email-icon-white.png"
                        }]
                    });
                </script>

                <div id="tab-container" class="tab-container">
                    <ul class='etabs'>
                        <li class='tab'><a href="#live_events">Upcoming Events
                        <em>4</em></a></li>
                        <li class='tab'><a href="#past_events">Past Events
                        <em>85</em></a></li>
                    </ul>
                    <div id="live_events">

                        <div id="eventscontent" class="area-production-list area-production-list-thin">

                            
                                    <div class="module-box row">
                                

                                    <div class="col-4-mar col">
                                        <div class="event-border">

                                            <a href="https://www.outsavvy.com/event/10425/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">£7</div>

                                                    </div>

                                                    <div class="entry-details">

                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Tuesday 8th November 2022</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>

                                                         
                                                    </div>

                                                </div>

                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">
                                        <div class="event-border">

                                            <a href="https://www.outsavvy.com/event/10440/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/ba517a36-0579-4f74-8d09-4f5f2299ee4e.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">£30</div>

                                                    </div>

                                                    <div class="entry-details">

                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Tuesday 15th November 2022</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>

                                                         
                                                    </div>

                                                </div>

                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">
                                        <div class="event-border">

                                            <a href="https://www.outsavvy.com/event/10450/queer-poetry-spoken-word-open-mic-night-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png" alt="Queer+Poetry+Spoken+Word+Open-Mic+Night+-+London" />

                                                        <div class="feature-price">£10</div>

                                                    </div>

                                                    <div class="entry-details">

                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Poetry Spoken Word Open-Mic Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Thursday 17th November 2022</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Common Counter at Glass House,  London</span>
                                                        </div>

                                                         
                                                    </div>

                                                </div>

                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">
                                        <div class="event-border">

                                            <a href="https://www.outsavvy.com/event/10444/queer-book-club-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/228f8440-632d-4fe0-ad2d-8d02452fd3ff.png" alt="Queer+Book+Club+-+London" />

                                                        <div class="feature-price">£6</div>

                                                    </div>

                                                    <div class="entry-details">

                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Tuesday 22nd November 2022</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>

                                                         
                                                    </div>

                                                </div>

                                            </a>
                                        </div>
                                    </div>

                                
                                    </div> 

                                

                        </div>

                        

                    </div>
                    <div id="past_events">
                        <div id="pasteventscontent" class="area-production-list area-production-list-thin">

                            
                                    <div id="eventscontent" class="module-box row">
                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10448/monthly-queer-trivia-night-black-history-month">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/3fb4a1a7-a31f-4754-b1d9-7198e727ea94.png" alt="Monthly+Queer+Trivia+Night+-+Black+History+Month" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Monthly Queer Trivia Night - Black History Month</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10442/queer-book-club-meet-the-author-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/228f8440-632d-4fe0-ad2d-8d02452fd3ff.png" alt="Queer+Book+Club+%2b+Meet+the+author+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club + Meet the author - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10423/queer-poetry-spoken-word-open-mic-night-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png" alt="Queer+Poetry+Spoken+Word+Open-Mic+Night+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Poetry Spoken Word Open-Mic Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10422/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/ba517a36-0579-4f74-8d09-4f5f2299ee4e.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10419/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10413/queer-pub-quiz-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/7fad5bc9-7f0f-4005-a59a-ea0a4144db34.png" alt="Monthly+Queer+Trivia+Night+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Monthly Queer Trivia Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10288/queer-speed-dating-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/d2450982-04be-4bb4-a31b-f563d435cc50.png" alt="Queer+Speed+Dating+-+In-Person+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Speed Dating - In-Person - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10282/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/10280/queer-poetry-spoken-word-open-mic-night-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png" alt="Queer+Poetry+Spoken+Word+Open-Mic+Night+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Poetry Spoken Word Open-Mic Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9918/queer-book-club-meet-the-author-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/a6512cd7-df9f-4ee3-830e-453bd71f58f1.png" alt="Queer+Book+Club+%2b+Meet+the+author+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club + Meet the author - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9917/queer-book-club-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/58c614c4-46d5-413c-9256-58dadd9dfdee.png" alt="Queer+Book+Club+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9711/queer-poetry-spoken-word-open-mic-night-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png" alt="Queer+Poetry+Spoken+Word+Open-Mic+Night+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Poetry Spoken Word Open-Mic Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9658/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9548/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/68dd4235-d76e-44ef-8609-341822ddcb26.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9410/queer-book-club-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/da215184-af77-4138-92fb-4c432d6803cb.png" alt="Queer+Book+Club+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9103/linocut-print-art-workshop-for-lgbtq-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/2f72d473-d057-4e06-8576-6b37a3ffdaa5.png" alt="Linocut+Print+Art+Workshop+for+LGBTQ%2b+Women%2c+Trans+and+Non-Binary+People" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Linocut Print Art Workshop for LGBTQ+ Women, Trans and Non-Binary People</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9102/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9080/lgbtqia-trivia-night-history-theme">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/78244d26-12e8-40b3-b8f4-b65480d3d5df.png" alt="Queer+Pub+Quiz+-+In-Person%2c+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pub Quiz - In-Person, London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9054/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/7ad8f99e-ca9d-4cd5-a5ec-484988c2f4dc.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/9053/queer-poetry-spoken-word-open-mic-night-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png" alt="Queer+Poetry+Spoken+Word+Open-Mic+Night+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Poetry Spoken Word Open-Mic Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8996/queer-book-club-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/cf770dc7-8a2f-4572-bf66-648c55594389.png" alt="Queer+Book+Club+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8928/queer-speed-dating-in-person-london-filmed">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/d2450982-04be-4bb4-a31b-f563d435cc50.png" alt="Queer+Speed+Dating+-+In-Person+-+London+(FILMED)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Speed Dating - In-Person - London (FILMED)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8927/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8768/queer-poetry-spoken-word-open-mic-night-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png" alt="Queer+Poetry+Spoken+Word+Open-Mic+Night+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Poetry Spoken Word Open-Mic Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8767/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8766/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/eaee09ae-4cc9-4980-8f99-d6daaa8545cf.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8697/queer-book-club-meet-the-author-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_282,q_auto,w_500/https://cdn.outsavvy.com/events/561e2cdb-d2c6-4404-a72c-a733b2f7f900.png" alt="Queer+Book+Club+%2b+Meet+the+author+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club + Meet the author - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8489/queer-poetry-spoken-word-open-mic-night-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png" alt="Queer+Poetry+Spoken+Word+Open-Mic+Night+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Poetry Spoken Word Open-Mic Night - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8410/queer-book-club-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/e93dbf0e-51e3-40d0-b272-f5360baaf539.png" alt="Queer+Book+Club+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8352/queer-board-game-group">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png" alt="Queer+Board+Game+Group" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Board Game Group</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Commons at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8351/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/f05a937f-8894-4c1a-a61a-c0ad3059aa96.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8296/linocut-print-art-workshop-for-lgbtq-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/a46aaefb-e03c-44f2-bde8-2279b1ec006b.png" alt="Linocut+Print+Art+Workshop+for+LGBTQ%2b+Women%2c+Trans+and+Non-Binary+People" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Linocut Print Art Workshop for LGBTQ+ Women, Trans and Non-Binary People</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8295/queer-speed-dating-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/d2450982-04be-4bb4-a31b-f563d435cc50.png" alt="Queer+Speed+Dating+-+In-Person+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Speed Dating - In-Person - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8290/queer-book-club-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/c38952dc-18ba-498c-8f28-87e1d8ab3cee.png" alt="Queer+Book+Club+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8221/queer-book-club-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/86ae92cb-4ece-4391-93c3-891421bb139c.png" alt="Queer+Book+Club+-+London" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Book Club - London</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/8083/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/fbfaa0ad-0c28-412c-aae5-59dc52071e97.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7784/queer-pottery-workshop-festive-edition">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/1153a5bf-a9b1-415f-8158-98ffb13db07f.png" alt="Queer+Pottery+Workshop+-+Festive+Edition!" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Workshop - Festive Edition!</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7552/open-mic-drag-night">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/99b53d12-5251-476a-b6e8-1d5dd1f4b897.png" alt="Open+Mic+Drag+Night" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Open Mic Drag Night</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Grow,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7532/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/fbfaa0ad-0c28-412c-aae5-59dc52071e97.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7468/online-boxing-class">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/c165fe50-bb33-4bc9-af5a-307f6b61bd55.png" alt="Online+Boxing+Class" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Online Boxing Class</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7451/queer-collage-portrait-art-workshop-in-person-london-sappho-events">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/05660770-6c7d-450a-a8cb-6ec7e4b94f08.png" alt="Queer+Collage+Portrait+Art+Workshop+(In-Person%2c+London)+-+Sappho+Events" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Collage Portrait Art Workshop (In-Person, London) - Sappho Events</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7448/yin-yoga-for-queer-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/4074a313-bde1-4086-a131-69dec80733bf.png" alt="Yin+Yoga+for+Queer+women%2c+trans+and+non-binary+people" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Yin Yoga for Queer women, trans and non-binary people</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7447/yin-yoga-for-queer-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/4074a313-bde1-4086-a131-69dec80733bf.png" alt="Yin+Yoga+for+Queer+women%2c+trans+and+non-binary+people" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Yin Yoga for Queer women, trans and non-binary people</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7439/queer-pottery-making-workshop-in-person-london">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/750d9085-eebf-4d7f-835f-88b39037e47d.png" alt="Queer+Pottery+Making+Workshop+(In+Person%2c+London)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Pottery Making Workshop (In Person, London)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7419/speed-dating-for-lgbtq-women-and-non-binary-people-in-the-uk">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/bfd1f8d7-a166-4104-96de-2841e28aecca.jpg" alt="Online+Queer+Speed+Dating+for+LGBTQ+Women+and+Non-Binary+People+in+the+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Online Queer Speed Dating for LGBTQ Women and Non-Binary People in the UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7418/drawing-with-eli">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/a76a3167-af3c-4211-98aa-6a6f4f0f330a.jpg" alt="Drawing+with+Eli" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Drawing with Eli</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7214/queer-books-laura-kay-daisy-jones">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/a8da563c-c4b7-4e32-8171-c5c1e6974a1d.png" alt="Queer+Books+-+In+Conversation+with+Laura+Kay+(The+Split)+and+Daisy+Jones+(All+The+Things+She+Said)" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Books - In Conversation with Laura Kay (The Split) and Daisy Jones (All The Things She Said)</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Counter at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7201/online-queer-writing-workshop">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/a4203944-bc52-41fb-957c-d76f8bcd19f4.jpg" alt="Online+Queer+Writing+Workshop" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Online Queer Writing Workshop</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7168/lgbtq-disability-panel-creating-inclusive-queer-spaces-for-the-disability-community">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/09207d5c-9418-48b6-9c7b-7b058b233cb5.jpg" alt="LGBTQ%2b+Disability+Panel+-+Creating+Inclusive+Queer+Spaces+for+the+Disability+Community" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>LGBTQ+ Disability Panel - Creating Inclusive Queer Spaces for the Disability Community</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7167/online-boxing-class">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/21b1c7a7-929a-4f2f-9738-edb90eb81225.jpg" alt="Online+Boxing+Class" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Online Boxing Class</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7165/linocut-print-workshop-for-lgbtqia-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/573af884-c3cc-4d7f-b9dc-ba6d3f25324e.jpg" alt="Linocut+Print+Workshop+for+LGBTQIA%2b+Women%2c+Trans+and+Non-Binary+People" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Linocut Print Workshop for LGBTQIA+ Women, Trans and Non-Binary People</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7164/queer-poc-speed-dating-in-the-uk">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/cc3d6ef0-9582-4805-9792-97c4e9bde537.jpg" alt="Queer+POC+speed+dating+in+the+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer POC speed dating in the UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7163/speed-dating-for-lgbtqia-women-trans-and-non-binary-people-in-the-uk">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/35251bec-23c9-44a9-a231-d49d640b94df.jpg" alt="Speed+Dating+for+LGBTQIA+Women%2c+Trans+and+Non-Binary+People+in+the+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Speed Dating for LGBTQIA Women, Trans and Non-Binary People in the UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7162/queer-film-night">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/bf64def4-a6d8-43a0-8173-89a4d60f3d3f.jpg" alt="Queer+Film+Night" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Film Night</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7161/yin-yoga-for-queer-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/ccb81e05-da9a-4f14-923d-99d1afcaeef4.jpg" alt="Yin+Yoga+for+Queer+women%2c+trans+and+non-binary+people" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Yin Yoga for Queer women, trans and non-binary people</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/7101/linocut-print-art-workshop-for-lgbt-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/53f7108d-824a-4be2-983f-429193488d39.png" alt="Linocut+Print+Art+Workshop+for+LGBT%2b+Women%2c+Trans+and+Non-Binary+People" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Linocut Print Art Workshop for LGBT+ Women, Trans and Non-Binary People</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6814/linocut-print-art-workshop-for-lgbt-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/a199df2b-d68f-4d5c-9f33-c147e2d250b4.jpg" alt="Linocut+Print+Art+Workshop+for+LGBT%2b+Women%2c+Trans+and+Non-Binary+People" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Linocut Print Art Workshop for LGBT+ Women, Trans and Non-Binary People</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">The Common Press at Glass House,  London</span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6587/bury-your-toxic-tropes-an-intro-lgbtq-writing-workshop-with-sapphic-writers">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/48ae78ee-207f-4321-b2a1-468963cd1fb1.jpg" alt="Bury+Your+Toxic+Tropes%3a+An+Intro+LGBTQ%2b+Writing+Workshop+With+Sapphic+Writers" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Bury Your Toxic Tropes: An Intro LGBTQ+ Writing Workshop With Sapphic Writers</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6586/bury-your-toxic-tropes-an-intro-lgbtq-writing-workshop-with-sapphic-writers">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/48ae78ee-207f-4321-b2a1-468963cd1fb1.jpg" alt="Bury+Your+Toxic+Tropes%3a+An+Intro+LGBTQ%2b+Writing+Workshop+With+Sapphic+Writers" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Bury Your Toxic Tropes: An Intro LGBTQ+ Writing Workshop With Sapphic Writers</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6426/yin-yoga-for-queer-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://outsavvy.s3.eu-west-1.amazonaws.com/events/4074a313-bde1-4086-a131-69dec80733bf.png" alt="Yin+Yoga+for+Queer+women%2c+trans+and+non-binary+people" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Yin Yoga for Queer women, trans and non-binary people</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6312/drag-king-make-up-workshop-with-len-blanco">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://cdn.outsavvy.com/events/c8d33c61-46b5-4a6b-80eb-f4e4d04d11ce.png" alt="Drag+King+Make-Up+Workshop+with+Len+Blanco" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Drag King Make-Up Workshop with Len Blanco</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6311/yin-yoga-online-for-queer-women-trans-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/f3932379-b0e4-459c-a60d-f9a3c4b213f4.png" alt="Yin+Yoga+-+Online+-+for+queer+women%2c+trans+and+non-binary+people" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Yin Yoga - Online - for queer women, trans and non-binary people</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6184/queer-film-club-night">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/2514aaaa-4ffb-412a-bb16-24cbb7adf4df.png" alt="Queer+Film+Club+Night" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Queer Film Club Night</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6180/lgbtq-mental-health-panel-transitioning-out-of-lockdown">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/9d54befd-aae5-4264-8c1d-25346579abcf.png" alt="LGBTQ%2b+Mental+Health+Panel+-+Transitioning+Out+of+Lockdown" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>LGBTQ+ Mental Health Panel - Transitioning Out of Lockdown</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6112/vegan-cook-along">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/143af761-3568-4efa-908e-30b7291d6d76.jpg" alt="Vegan+Cook+Along" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Vegan Cook Along</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6105/speed-dating-for-lgbtq-women-and-non-binary-people-ages-30s40s-in-the-uk">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/bfd1f8d7-a166-4104-96de-2841e28aecca.jpg" alt="Speed+Dating+for+LGBTQ+Women+and+Non-Binary+People+Ages+30s%2f40s+in+the+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Speed Dating for LGBTQ Women and Non-Binary People Ages 30s/40s in the UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6104/qtipoc-speed-dating-with-cyro-as-your-cupid">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/96a66f01-5523-4b35-9106-6695ce5e09e9.jpg" alt="QTIPOC+speed+dating+with+CYRO+as+your+cupid" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>QTIPOC speed dating with CYRO as your cupid</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6093/self-portrait-workshop">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/9e8f6d4d-6908-429e-8706-b837f2bd15d5.png" alt="Self-Portrait+Workshop" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Self-Portrait Workshop</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/6042/linocut-print-workshop-for-lgbt-women-and-non-binary-people">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/7ceb5ec1-212e-436e-86a7-2a7103cf8dd0.jpg" alt="Linocut+Print+Workshop+for+LGBT%2b+Women+and+Non-Binary+People" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Linocut Print Workshop for LGBT+ Women and Non-Binary People</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5965/morning-flow-online-yoga-class">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/abd4e8b8-bac5-472b-b724-8c9f22e7349c.jpg" alt="Morning+Flow+-+online+yoga+class" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Morning Flow - online yoga class</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5964/online-boxing-4-week-course-for-beginners">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/33c2d918-04a4-45e4-a628-ec0fa58db062.jpg" alt="Online+Boxing+-+4+Week+Course+for+Beginners" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Online Boxing - 4 Week Course for Beginners</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5963/bury-your-toxic-tropes-an-intro-lgbtq-writing-workshop-with-sapphic-writers">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/48ae78ee-207f-4321-b2a1-468963cd1fb1.jpg" alt="Bury+Your+Toxic+Tropes%3a+An+Intro+LGBTQ%2b+Writing+Workshop+With+Sapphic+Writers" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Bury Your Toxic Tropes: An Intro LGBTQ+ Writing Workshop With Sapphic Writers</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5944/lgbtq-book-club-life-as-a-unicorn-by-amrou-al-kadhi">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/727d2d34-1152-4c35-960a-f2762db4d968.jpg" alt="LGBTQ+Book+Club+-+Life+as+a+Unicorn+by+Amrou+Al-Kadhi" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>LGBTQ Book Club - 'Life as a Unicorn' by Amrou Al-Kadhi</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5943/online-games-night-for-queer-women-and-non-binary-people-chess">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/22c9e91e-6530-4757-92de-1997ce3372ab.jpg" alt="Online+Games+night+for+queer+women+and+non-binary+people+-+Chess" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Online Games night for queer women and non-binary people - Chess</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5942/speed-dating-for-lgbtq-women-and-non-binary-people-in-the-uk-ages-20s-and-30s-in-uk">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/ee6aad71-a168-4f22-b211-76162e641921.jpg" alt="Speed+Dating+for+LGBTQ+Women+and+Non-Binary+People+in+the+UK+Ages+20s+and+30s+in+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Speed Dating for LGBTQ Women and Non-Binary People in the UK Ages 20s and 30s in UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5941/speed-dating-for-lgbtq-women-and-non-binary-people-in-uk-20s-30s">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/bfd1f8d7-a166-4104-96de-2841e28aecca.jpg" alt="Speed+Dating+for+LGBTQ+Women+and+Non-Binary+People+Ages+20s%2f30s+in+the+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Speed Dating for LGBTQ Women and Non-Binary People Ages 20s/30s in the UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5918/morning-flow-online-yoga-class">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/abd4e8b8-bac5-472b-b724-8c9f22e7349c.jpg" alt="Morning+Flow+-+online+yoga+class" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Morning Flow - online yoga class</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5908/drag-king-workshop-with-len-blanco">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/d24c191e-6f7a-4c23-b048-00adf8d932d2.jpg" alt="Drag+King+Workshop+with+Len+Blanco" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Drag King Workshop with Len Blanco</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5881/candle-making-workshop-to-the-sounds-of-enya">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/4894dd18-773a-4a98-93bd-d881e2c2a9c9.jpg" alt="Candle-Making+Workshop+to+the+sounds+of+Enya" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Candle-Making Workshop to the sounds of Enya</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5865/lgbtq-book-club-the-girl-with-the-treasure-chest-by-veronica-fearon">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/6ec37fb3-66dc-4f9f-ab47-30424d116fc7.jpg" alt="LGBTQ+Book+Club+-+The+Girl+with+the+Treasure+Chest+by+Veronica+Fearon+%2b+Q%26A+with+the+author" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>LGBTQ Book Club - 'The Girl with the Treasure Chest' by Veronica Fearon + Q&A with the author</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5857/speed-dating-for-queer-women-and-non-binary-people-ages-20s-and-30s-in-uk">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/ee6aad71-a168-4f22-b211-76162e641921.jpg" alt="Speed+Dating+for+Queer+Women+and+Non-Binary+People+Ages+20s+and+30s+in+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Speed Dating for Queer Women and Non-Binary People Ages 20s and 30s in UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5824/vegan-cook-along">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/3ba016a2-577c-4204-8bb7-b4a1b783eb10.png" alt="Vegan+cook+along" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Vegan cook along</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5822/speed-dating-for-queer-women-and-non-binary-people-ages-20s-and-30s-in-uk">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/ee6aad71-a168-4f22-b211-76162e641921.jpg" alt="Speed+Dating+for+Queer+Women+and+Non-Binary+People+Ages+20s+and+30s+in+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Speed Dating for Queer Women and Non-Binary People Ages 20s and 30s in UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5821/queer-speed-dating-30s-and-40s">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/0c94d029-a65f-4aa0-adee-53ad21bfa7a5.jpg" alt="Speed+Dating+for+Queer+Women+and+Non-Binary+People+Ages+30s+and+40s+in+UK" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>Speed Dating for Queer Women and Non-Binary People Ages 30s and 40s in UK</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                

                                    <div class="col-4-mar col">

                                        <div class="event-border">
                                            <a href="https://www.outsavvy.com/event/5816/box-away-the-blues-boxing-special">
                                                <div class="event-feed latest">
                                                    <div class="event-image">

                                                        <img class='lazy' src='https://cdn.outsavvy.com/website/preloader.jpg' data-src="https://res.cloudinary.com/outsavvy/image/fetch/c_fill,h_244,q_auto,w_500/https://s3-eu-west-1.amazonaws.com/outsavvy/events/a84dc895-742c-4e21-a1c6-e987a2f5aa1c.jpg" alt="Box+Away+the+Blues+Boxing+Special" />

                                                        <div class="feature-price">
                                                            Tickets Off Sale
                                                        </div>

                                                    </div>

                                                    <div class="entry-details">
                                                        <div class="arrow-up"></div>

                                                        <h5>'Box Away the Blues' Boxing Special</h5>

                                                        <div class="time">
                                                            <span class="copy">Past Event</span>
                                                        </div>

                                                        <div class="address">
                                                            <span class="copy">Online Event </span>
                                                        </div>
                                                         
                                                    </div>

                                                </div>
                                            </a>
                                        </div>
                                    </div>

                                
                                    </div> 

                                

                        </div>

                        <div id="pagination"></div>

                        
                    </div>
                </div>

            </div>

        </div>

    </div>


                                </div>
                                <div id="sidebar" class="">
                                    
                                </div>
                                <!-- container -->
                            </div>
                        
</div>

                        

                        
                            <div class="clearfix ">
                                

                            </div>
                        

                        

                    </div>

                    <!-- SECTION -->
                    

<div id="footer">

    <div class="footer" data-is="footerText">

        <div class="row footer-top">

            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 col">

                <div class="footer-social footer-top">

                    <a href="/">
                        <img itemprop="logo" class="logo" src="https://cdn.outsavvy.com/website/outsavvylogo-new.png" alt="OutSavvy - Discover events and book tickets. Buy tickets quickly and securely">
                    </a>

                    <div id="footer-apps">

                        <div class="actions">
                            <a class="btn ui-gradient-green btn-app-store btn-download shadow-lg" href="https://apps.apple.com/gb/app/outsavvy/id722344276" target="_blank"><span>Available on the</span> <span>App Store</span></a>
                            <a class="btn ui-gradient-blue btn-google-play btn-download shadow-lg" href="https://play.google.com/store/apps/details?id=com.outsavvyapp" target="_blank"><span>Available on </span><span>Google Play</span></a>
                        </div>

                    </div>

                </div>
            </div>

            <hr />

            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 col">

                <div class="footer-social">

                    <div class="footer__links">
                        <ul class="list-inline">
                            <li><a href="/contactus" title="Contact us">Contact</a></li>
                            <li><a href="/aboutus" title="About OutSavvy - Create, share, discover & attend Events">About</a></li>
                            <li><a href="/blog" title="Latest OutSavvy ticketing platform blogs">Blog</a></li>
                            <li><a href="/developer" title="The OutSavvy API, pull in feeds of data for events">Developer</a></li>
                            <li><a href="/terms" title="OutSavvy Terms and Conditions">Terms & Conditions</a></li>
                            <li><a href="/privacypolicy" title="OutSavvy Privacy Policy">Privacy Policy</a></li>
                            <li><a href="/cookiepolicy" title="OutSavvy Cookie Policy">Cookie Policy</a></li>
                        </ul>

                    </div>

                    <a href="/selltickets" class="partners-button" target="_blank">
                        <span>Sell Event Tickets</span></a>
                </div>
            </div>

            <hr />

            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 col">

                <div class="footer-social">

                    <div class="footer__social">

                        <div class="card-wrapper">
                            <div class="card-holder infopop" title="" data-original-title="Visa">
                                <svg width="39" height="26" viewBox="0 0 39 26">
                                    <path d="M1.8 0h35.4c1 0 1.8.8 1.8 1.9v22.3c0 1-.8 1.9-1.8 1.9H1.8c-1 0-1.8-.8-1.8-1.9V1.9C0 .8.8 0 1.8 0z" fill="#f5f6f8"></path><path d="M1.8 0h35.4c1 0 1.8.8 1.8 1.9v4.3H0V1.9C0 .8.8 0 1.8 0z" fill="#0071ce"></path><path d="M0 19.8h39v4.3c0 1-.8 1.9-1.8 1.9H1.8c-1 0-1.8-.8-1.8-1.9v-4.3z" fill="#fb9122"></path><path d="M15.7 17.2l1.1-7.2h1.8l-1.1 7.2h-1.8zm8.3-7c-.4-.1-.9-.3-1.6-.3-1.8 0-3 1-3 2.4 0 1 .9 1.6 1.6 2 .7.4.9.6.9.9 0 .5-.6.7-1.1.7-.7 0-1.1-.1-1.7-.4l-.2-.1-.3 1.6c.4.2 1.2.4 2 .4 1.9 0 3.1-1 3.1-2.5 0-.8-.5-1.4-1.5-2-.6-.3-1-.6-1-.9 0-.3.3-.6 1-.6.6 0 1 .1 1.3.3l.2.1.3-1.6zm2.4 4.5c.1-.4.7-2 .7-2s.1-.4.2-.7l.1.6s.3 1.7.4 2.1h-1.4zm-14.2-.8l.2 1 1.8-4.9h1.9l-2.8 7.2h-1.9L9.8 11c-.6-.3-1.2-.6-1.9-.8v-.1h2.9c.4 0 .7.2.8.6l.6 3.2zM28.6 10h-1.4c-.4 0-.8.1-.9.6l-2.7 6.6h1.9s.3-.9.4-1.1h2.3c.1.3.2 1.1.2 1.1H30L28.6 10z" fill="#0071ce"></path></svg>
                            </div>
                            <div class="card-holder infopop" title="" data-original-title="Mastercard">
                                <svg width="39" height="26" viewBox="0 0 39 26">
                                    <path d="M1.8 0h35.4c1 0 1.8.8 1.8 1.9v22.3c0 1-.8 1.9-1.8 1.9H1.8c-1 0-1.8-.8-1.8-1.9V1.9C0 .8.8 0 1.8 0z" fill="#f5f6f8"></path><path d="M19.5 7.7c1.2-1 2.7-1.6 4.3-1.6 3.8 0 6.8 3 6.8 6.8s-3.1 6.8-6.8 6.8c-1.6 0-3.2-.6-4.3-1.6C21 17 22 15.1 22 13s-1-4-2.5-5.3z" fill="#f7a213"></path><path d="M19.5 7.7c-1.2-1-2.7-1.6-4.3-1.6-3.8 0-6.8 3-6.8 6.8s3.1 6.8 6.8 6.8c1.6 0 3.2-.6 4.3-1.6C18 17 17 15.1 17 13s1-4 2.5-5.3z" fill="#eb141c"></path><path d="M19.5 18.3C21 17 22 15.1 22 13s-1-4-2.5-5.3C18 9 17 10.9 17 13s1 4 2.5 5.3z" fill="#fe6412"></path><path d="M37.2.6c.7 0 1.2.5 1.2 1.2v22.3c0 .7-.5 1.2-1.2 1.2H1.8c-.7 0-1.2-.5-1.2-1.2V1.9c0-.7.5-1.2 1.2-1.2h35.4m0-.7H1.8C.8 0 0 .8 0 1.9v22.3c0 1 .8 1.9 1.8 1.9h35.4c1 0 1.8-.8 1.8-1.9V1.9C39 .8 38.2 0 37.2 0z" fill="#dcdddf"></path></svg>
                            </div>
                            <div class="card-holder infopop" title="" data-original-title="Amex">
                                <svg width="39" height="26" viewBox="0 0 39 26">
                                    <path d="M1.8 0h35.4c1 0 1.8.8 1.8 1.9v22.3c0 1-.8 1.9-1.8 1.9H1.8c-1 0-1.8-.8-1.8-1.9V1.9C0 .8.8 0 1.8 0z" fill="#0081c9"></path><path d="M31 12.9l2.8-3.2h-4.1l-.7.9-.7-.9H17.5l-.7 1.8-.8-1.8h-3.5v2.5l-1.2-2.5H8.7l-3.2 6.7H9l.5-1.1h1l.5 1.1h17l.9-1.1.9 1.1H34l-3-3.5zm-18.1 2.5h-1.4l-.5-1.1H8.8l-.5 1.1H7l2.3-4.7h1.4l2.2 4.7zm7.1 0h-1.3V12l-1.5 3.4h-1L14.7 12v3.3h-1.3v-4.7h1.9l1.4 3.3 1.3-3.3h2v4.8zm5.8 0h-4.6v-4.7h4.6v.9h-3.2v1h2.9v.8h-2.9v1.2h3.3v.8zm3.1-1.7l-1.4 1.6H26l2.1-2.5-2-2.3h1.6l1.2 1.5 1.2-1.5h1.5l-2 2.3 2.1 2.5h-1.6l-1.2-1.6z" fill="#fff"></path><path fill="#fff" d="M9.9 11.8l-.8 1.7h1.6l-.7-1.7z"></path></svg>
                            </div>
                            <div class="card-holder infopop" title="" data-original-title="Apple Pay">
                                <svg width="27" height="18" viewBox="0 0 39 26">
                                    <path d="M1.82 0h35.36c1 0 1.82.83 1.82 1.85v22.3c0 1.02-.82 1.85-1.82 1.85H1.82C.82 26 0 25.17 0 24.15V1.85C0 .83.82 0 1.82 0z" fill="#f5f6f8"></path><path d="M37.18.65c.65 0 1.18.54 1.18 1.2v22.3c0 .66-.53 1.2-1.18 1.2H1.82c-.65 0-1.18-.54-1.18-1.2V1.85c0-.66.53-1.2 1.18-1.2h35.36m0-.65H1.82C.82 0 0 .83 0 1.85v22.3C0 25.17.82 26 1.82 26h35.36c1.01 0 1.82-.83 1.82-1.85V1.85C39 .83 38.18 0 37.18 0z" opacity="0.1"></path><g><path d="M10.57 9.1c.32-.4.54-.93.48-1.48-.47.02-1.04.31-1.37.71-.3.34-.56.9-.49 1.42.53.05 1.05-.26 1.38-.65M11.05 9.86c-.76-.05-1.41.43-1.77.43-.36 0-.92-.41-1.52-.4-.78.01-1.51.45-1.91 1.16-.82 1.41-.22 3.5.58 4.65.39.57.85 1.19 1.47 1.17.58-.02.81-.38 1.51-.38s.91.38 1.52.36c.64-.01 1.03-.57 1.42-1.14.44-.65.62-1.27.64-1.31-.01-.01-1.23-.48-1.24-1.88-.01-1.17.95-1.73 1-1.76-.56-.79-1.41-.88-1.7-.9"></path>
                                        <g>
                                            <path d="M18.64 8.27c1.65 0 2.81 1.14 2.81 2.8 0 1.67-1.18 2.81-2.85 2.81h-1.83v2.91h-1.32V8.27h3.19zm-1.88 4.5h1.52c1.15 0 1.81-.62 1.81-1.7s-.66-1.69-1.8-1.69h-1.52v3.39zM21.77 15.03c0-1.09.83-1.72 2.37-1.81l1.65-.1v-.47c0-.69-.46-1.07-1.26-1.07-.67 0-1.15.34-1.25.87h-1.19c.04-1.11 1.08-1.91 2.48-1.91 1.51 0 2.5.79 2.5 2.02v4.24h-1.22v-1.02h-.03c-.35.67-1.12 1.09-1.95 1.09-1.24-.01-2.1-.74-2.1-1.84zm4.02-.55V14l-1.47.09c-.83.05-1.26.36-1.26.9 0 .52.45.86 1.15.86.9 0 1.58-.57 1.58-1.37zM28.19 19.08v-1.02c.08.01.28.02.39.02.59 0 .92-.25 1.12-.89l.12-.38-2.24-6.21h1.38l1.56 5.04h.03l1.56-5.04h1.35l-2.32 6.52c-.53 1.5-1.14 1.99-2.43 1.99-.11.01-.43-.01-.52-.03z"></path>
                                        </g>
                                    </g></svg>
                            </div>
                            <div class="card-holder infopop" title="" data-original-title="Google Pay">
                                <svg width="27" height="18" viewBox="0 0 39 26">
                                    <path d="M1.82 0h35.36c1 0 1.82.83 1.82 1.85v22.3c0 1.02-.82 1.85-1.82 1.85H1.82C.82 26 0 25.17 0 24.15V1.85C0 .83.82 0 1.82 0z" fill="#f5f6f8"></path><path d="M18.74 9.58v2.83h1.73c.41 0 .75-.14 1.02-.42.28-.28.42-.61.42-1 0-.38-.14-.71-.42-.99a1.33 1.33 0 0 0-1.02-.43l-1.73.01zm0 3.83v3.28h-1.03v-8.1h2.74c.7 0 1.29.23 1.78.7s.74 1.04.74 1.71c0 .69-.25 1.26-.74 1.72-.48.46-1.07.69-1.78.69h-1.71zM24.01 15c0 .27.11.5.34.68.23.18.5.27.8.27.43 0 .82-.16 1.16-.49.34-.32.51-.71.51-1.14-.32-.26-.77-.38-1.35-.38-.42 0-.77.1-1.05.31-.27.19-.41.44-.41.75m1.34-4.04c.76 0 1.37.21 1.81.62.44.41.66.98.66 1.69v3.42h-.99v-.77h-.05c-.43.63-1 .95-1.71.95-.61 0-1.12-.18-1.52-.54-.41-.36-.61-.82-.61-1.36 0-.57.22-1.03.65-1.37.43-.34 1.01-.51 1.73-.51.61 0 1.12.11 1.52.34v-.23c0-.36-.14-.67-.43-.92-.27-.25-.63-.38-1-.38-.58 0-1.03.25-1.37.74l-.91-.58c.5-.73 1.24-1.1 2.22-1.1m8.15.19l-3.45 8h-1.07l1.28-2.8-2.27-5.2h1.12l1.64 3.99h.02l1.6-3.99h1.13z" fill="#5f6368"></path><path d="M14.56 12.7c0 1.42-.5 2.62-1.37 3.43l-1.49-1.17c.48-.33.82-.84.93-1.41h-2.5v-1.8h4.36c.05.31.07.63.07.95z" fill="#4285f4"></path><path d="M13.19 16.13c-.77.72-1.82 1.13-3.07 1.13a4.61 4.61 0 0 1-4.13-2.56l1.53-1.21c.36 1.11 1.39 1.93 2.6 1.93.62 0 1.16-.16 1.58-.45l1.49 1.16z" fill="#34a853"></path><path d="M7.52 13.49L5.99 14.7c-.31-.64-.48-1.34-.48-2.1-.01-.72.16-1.44.48-2.09l1.53 1.21c-.19.56-.19 1.18 0 1.77z" fill="#fabb05"></path><path d="M13.22 9.15l-1.32 1.33c-.48-.46-1.09-.69-1.78-.69-1.21 0-2.24.81-2.6 1.93L5.99 10.5a4.61 4.61 0 0 1 4.13-2.56c1.25 0 2.29.46 3.1 1.21z" fill="#e94235"></path><path d="M37.18.65c.65 0 1.18.54 1.18 1.2v22.3c0 .66-.53 1.2-1.18 1.2H1.82c-.65 0-1.18-.54-1.18-1.2V1.85c0-.66.53-1.2 1.18-1.2h35.36m0-.65H1.82C.82 0 0 .83 0 1.85v22.3C0 25.17.82 26 1.82 26h35.36c1.01 0 1.82-.83 1.82-1.85V1.85C39 .83 38.18 0 37.18 0z" opacity="0.1"></path></svg>
                            </div>
                        </div>

                    </div>

                </div>
            </div>


            <hr />
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 col">



                <div class="footer-social">

                    <div class="footer__social">
                        <p class="copyright">
                            © OutSavvy Ltd, All rights reserved
                        </p>
                    </div>

                    <div class="footer__social">
                        <link itemprop="url" href="https://www.outsavvy.com" rel="">

                        <ul>
                            <li>
                                <div class="text-nowrap">
                                    <a itemprop="sameAs" target="_blank" rel="noreferer, ,noopener" title="OutSavvy on Instagram" href="https://www.instagram.com/outsavvy/">
                                        <svg class="svg-icon" viewBox="0 0 20 20">
                                            <path fill="none" d="M14.52,2.469H5.482c-1.664,0-3.013,1.349-3.013,3.013v9.038c0,1.662,1.349,3.012,3.013,3.012h9.038c1.662,0,3.012-1.35,3.012-3.012V5.482C17.531,3.818,16.182,2.469,14.52,2.469 M13.012,4.729h2.26v2.259h-2.26V4.729z M10,6.988c1.664,0,3.012,1.349,3.012,3.012c0,1.664-1.348,3.013-3.012,3.013c-1.664,0-3.012-1.349-3.012-3.013C6.988,8.336,8.336,6.988,10,6.988 M16.025,14.52c0,0.831-0.676,1.506-1.506,1.506H5.482c-0.831,0-1.507-0.675-1.507-1.506V9.247h1.583C5.516,9.494,5.482,9.743,5.482,10c0,2.497,2.023,4.52,4.518,4.52c2.494,0,4.52-2.022,4.52-4.52c0-0.257-0.035-0.506-0.076-0.753h1.582V14.52z"></path>
                                        </svg>

                                    </a>
                                </div>
                            </li>
                            <li>
                                <div class="text-nowrap">
                                    <a itemprop="sameAs" target="_blank" rel="noreferer, ,noopener" title="OutSavvy on Twitter" href="https://twitter.com/outsavvy">
                                        <svg class="svg-icon" viewBox="0 0 20 20">
                                            <path fill="none" d="M18.258,3.266c-0.693,0.405-1.46,0.698-2.277,0.857c-0.653-0.686-1.586-1.115-2.618-1.115c-1.98,0-3.586,1.581-3.586,3.53c0,0.276,0.031,0.545,0.092,0.805C6.888,7.195,4.245,5.79,2.476,3.654C2.167,4.176,1.99,4.781,1.99,5.429c0,1.224,0.633,2.305,1.596,2.938C2.999,8.349,2.445,8.19,1.961,7.925C1.96,7.94,1.96,7.954,1.96,7.97c0,1.71,1.237,3.138,2.877,3.462c-0.301,0.08-0.617,0.123-0.945,0.123c-0.23,0-0.456-0.021-0.674-0.062c0.456,1.402,1.781,2.422,3.35,2.451c-1.228,0.947-2.773,1.512-4.454,1.512c-0.291,0-0.575-0.016-0.855-0.049c1.588,1,3.473,1.586,5.498,1.586c6.598,0,10.205-5.379,10.205-10.045c0-0.153-0.003-0.305-0.01-0.456c0.7-0.499,1.308-1.12,1.789-1.827c-0.644,0.28-1.334,0.469-2.06,0.555C17.422,4.782,17.99,4.091,18.258,3.266"></path>
                                        </svg>

                                    </a>
                                </div>
                            </li>
                            <li>
                                <div class="text-nowrap">
                                    <a itemprop="sameAs" target="_blank" rel="noreferer, ,noopener" title="OutSavvy on Facebook" href="https://www.facebook.com/outsavvyuk/">
                                        <svg class="svg-icon" viewBox="0 0 20 20">
                                            <path fill="none" d="M11.344,5.71c0-0.73,0.074-1.122,1.199-1.122h1.502V1.871h-2.404c-2.886,0-3.903,1.36-3.903,3.646v1.765h-1.8V10h1.8v8.128h3.601V10h2.403l0.32-2.718h-2.724L11.344,5.71z"></path>
                                        </svg>

                                    </a>
                                </div>
                            </li>

                        </ul>

                    </div>


                </div>
            </div>

        </div>


    </div>

</div>

<script type="application/ld+json">{"@context":"http://schema.org","@type":"Brand","name":"OutSavvy","image":"https://cdn.outsavvy.com/website/outsavvylogo-new.png","logo":"https://cdn.outsavvy.com/website/outsavvylogo-new.png","url":"https://www.outsavvy.com","sameAs":["https://apps.apple.com/gb/app/outsavvy/id722344276","https://play.google.com/store/apps/details?id=com.outsavvyapp","https://www.facebook.com/outsavvyuk","https://twitter.com/outsavvy","https://instagram.com/outsavvy/"]}</script>
<script type="application/ld+json">{"@context":"http://schema.org","@type":"WebSite","url":"https://www.outsavvy.com","potentialAction":[{"@type":"SearchAction","target":"https://www.outsavvy.com/events?term={search_term_string}","query-input":"required name=search_term_string"}]}</script>

                </div>
            </div>

            <!-- page-wrapper -->

        </div>
        <!-- PAGE -->

        

    <script type="application/ld+json">
        [{"@context": "http://schema.org","@type": "VisualArtsEvent","name": "Queer Board Game Group","startDate": "2022-11-08T19:00:00","endDate": "2022-11-08T21:00:00","eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode","url" : "https://www.outsavvy.com/event/10425/queer-board-game-group","image" : "https://cdn.outsavvy.com/events/20083d67-7231-40bb-8931-80eb06c2d074.png","eventStatus" : "http://schema.org/EventScheduled","description" : "Are you queer and do you love playing board games?  Sappho runs a monthly social event for playing board games, open to LGBTQIA+ women, trans and non-binary people.  We have multiple tables set up with games, ranging from quick and easy games to learn for newbies, to medium-length strategy board games. If you&#39;ve got a game you&#39;d love to bring and teach others to play, please bring it too, as we will have some spare tables for wildcard games on the night.  This will be a really friendly environment where we can enjoy playing games with other queers who love games as much as us.  Learn something new, or put a new strategy to the test, and make some new queer friends in the process.  Date: Tuesday 8 November 2022, 7-9pm Location: The Commons, Glass House, 118 Bethnal Green Road, London, E2 6DGCost: &#163;7 cover charge (please note that costs go towards paying our staff to host the evening, and towards buying new board games)","location": {"@type": "Place","name": "The Commons at Glass House","address": { "@type" : "PostalAddress","streetAddress" : "The Commons at Glass House, 118 Bethnal Green Road, London, E2 6DG","addressLocality" : "London","addressRegion" : "England","postalCode" : "E2 6DG" },"geo" : {"@type" : "GeoCoordinates", "latitude" : "51.52462", "longitude" : "-0.0720284"} },"offers": {"@type": "AggregateOffer", "availability":"http://schema.org/InStock", "availabilityEnds":"2022-09-13T20:27:04","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10425/queer-board-game-group","lowPrice":7,"highPrice":7,"availabilityStarts":"2022-11-08T20:59:00","offers":[{"availability":"http://schema.org/InStock", "availabilityEnds":"2022-11-08T20:59:00","name":"General Admission","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10425/queer-board-game-group","price":7,"availabilityStarts":"2022-09-13T20:27:04","validFrom":"2022-09-13T20:27:04","@type":"Offer"}]},"performer" : { "@type" : "Organization", "url" : "https://www.outsavvy.com/organiser/sappho-events", "description" : "Sappho Events produces events for LGBTQ women and non-binary people in the UK. Our events revolve around common interest activities with a coffee and chat vibe. Our social events encourage making new friends and forming connections with other queer people. We also run dating events for queer women and non-binary people, which will be clearly marked.", "name" : "Sappho Events"}},{"@context": "http://schema.org","@type": "VisualArtsEvent","name": "Queer Pottery Making Workshop (In Person, London)","startDate": "2022-11-15T19:30:00","endDate": "2022-11-15T21:00:00","eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode","url" : "https://www.outsavvy.com/event/10440/queer-pottery-making-workshop-in-person-london","image" : "https://cdn.outsavvy.com/events/ba517a36-0579-4f74-8d09-4f5f2299ee4e.png","eventStatus" : "http://schema.org/EventScheduled","description" : "Join Sappho Events for a relaxing pottery workshop led by artist Megan Elliott, focusing on traditional hand-building techniques using minimal tools.Date: 15 November, 7:30-9pmLocation: The Common Press, Glass House, London (118 Bethnal Green Road, London, E2 6DG). The nearest station is Shoreditch High Street OvergroundPrice: &#163;30 (you will take home 1-2 new clay creations. )Please note that this event is fully wheelchair accessible, including accessible bathrooms. Participants will learn how to make a pinch pot and a coil pot out of air-drying clay and will be guided through how to personalise their new creations.At the end of the class, participants should have two small finished pots to take away with them and tips on how to decorate these at home when dry. These pots are perfect as little storage vessels or ornaments and can also be used for succulents/small plants.No experience necessary - suitable for all levels. Your clay will still be delicate upon completion, so please bring a little box or container to carry your creations home. A cardboard box (approximately 15cm x 15cm is ideal), but we will also have newspaper to wrap them in if needed.Sappho Events welcomes LGBTQIA+ women, trans and non-binary people to our events","location": {"@type": "Place","name": "The Common Press at Glass House","address": { "@type" : "PostalAddress","streetAddress" : "The Common Press at Glass House, 118 Bethnal Green Road, London, E2 6DG","addressLocality" : "London","addressRegion" : "England","postalCode" : "E2 6DG" },"geo" : {"@type" : "GeoCoordinates", "latitude" : "51.52462", "longitude" : "-0.0720284"} },"offers": {"@type": "AggregateOffer", "availability":"http://schema.org/InStock", "availabilityEnds":"2022-09-14T16:48:40","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10440/queer-pottery-making-workshop-in-person-london","lowPrice":30,"highPrice":30,"availabilityStarts":"2022-11-15T20:59:00","offers":[{"availability":"http://schema.org/InStock", "availabilityEnds":"2022-11-15T20:59:00","name":"General Admission","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10440/queer-pottery-making-workshop-in-person-london","price":30,"availabilityStarts":"2022-09-14T16:48:40","validFrom":"2022-09-14T16:48:40","@type":"Offer"}]},"performer" : { "@type" : "Organization", "url" : "https://www.outsavvy.com/organiser/sappho-events", "description" : "Sappho Events produces events for LGBTQ women and non-binary people in the UK. Our events revolve around common interest activities with a coffee and chat vibe. Our social events encourage making new friends and forming connections with other queer people. We also run dating events for queer women and non-binary people, which will be clearly marked.", "name" : "Sappho Events"}},{"@context": "http://schema.org","@type": "Event","name": "Queer Poetry Spoken Word Open-Mic Night - London","startDate": "2022-11-17T19:00:00","endDate": "2022-11-17T20:00:00","eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode","url" : "https://www.outsavvy.com/event/10450/queer-poetry-spoken-word-open-mic-night-london","image" : "https://cdn.outsavvy.com/events/def77413-ec77-4605-8c6b-dd51acbaca27.png","eventStatus" : "http://schema.org/EventScheduled","description" : "Join Sappho Events for an inspiring evening of queer spoken word poetry at Glass House, London&#39;s newest LGBTQIA+ venue in Shoreditch. On the night we will have a few established queer poets perform their work, alongside an open-mic line-up of new and emerging artists. This event is meant to give queer poets a chance to get back on stage and perform their work live for an audience. After so long staying at home during the pandemic, we hope to encourage people to try out new work, and maybe even try live performance for the first time. We also encourage acoustic singer-songwriters to perform their work on the evening. Performers will each have a 5-10 minute set, with timed slots handed out on the evening from 6:30pm. Please arrive before 7pm to reserve your spot, but we also welcome those who spontaneously decide on the night to perform in the second half of the evening. Date: Thursday 17 November, 7-8pmLocation: The Commons, Glass House, London (118 Bethnal Green Road, London, E2 6DG). The nearest station is Shoreditch High Street OvergroundPrice: &#163;10 entryOur event welcomes LBGTQIA+ women, trans and non-binary people. Please note the venue we are using for open mic is accessible, with accessible toilet access.","location": {"@type": "Place","name": "Common Counter at Glass House","address": { "@type" : "PostalAddress","streetAddress" : "Common Counter at Glass House, 118 Bethnal Green Road, London, E2 6DG","addressLocality" : "London","addressRegion" : "England","postalCode" : "E2 6DG" },"geo" : {"@type" : "GeoCoordinates", "latitude" : "51.52473", "longitude" : "-0.0717826"} },"offers": {"@type": "AggregateOffer", "availability":"http://schema.org/InStock", "availabilityEnds":"2022-09-14T17:46:39","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10450/queer-poetry-spoken-word-open-mic-night-london","lowPrice":10,"highPrice":10,"availabilityStarts":"2022-11-17T19:59:00","offers":[{"availability":"http://schema.org/InStock", "availabilityEnds":"2022-11-17T19:59:00","name":"General Admission","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10450/queer-poetry-spoken-word-open-mic-night-london","price":10,"availabilityStarts":"2022-09-14T17:46:39","validFrom":"2022-09-14T17:46:39","@type":"Offer"}]},"performer" : { "@type" : "Organization", "url" : "https://www.outsavvy.com/organiser/sappho-events", "description" : "Sappho Events produces events for LGBTQ women and non-binary people in the UK. Our events revolve around common interest activities with a coffee and chat vibe. Our social events encourage making new friends and forming connections with other queer people. We also run dating events for queer women and non-binary people, which will be clearly marked.", "name" : "Sappho Events"}},{"@context": "http://schema.org","@type": "VisualArtsEvent","name": "Queer Book Club - London","startDate": "2022-11-22T19:00:00","endDate": "2022-11-22T20:00:00","eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode","url" : "https://www.outsavvy.com/event/10444/queer-book-club-london","image" : "https://cdn.outsavvy.com/events/228f8440-632d-4fe0-ad2d-8d02452fd3ff.png","eventStatus" : "http://schema.org/EventScheduled","description" : "Calling all queer book-lovers - join us for an evening of sapphic bookish chats. Every month, we will be reading a new piece of sapphic literature and coming together at @glasshouselondon to discuss over a cuppa or mocktail with the Sappho Events community.For November, we have chosen Torrey Peters&#39; novel, “Detransition, Baby”.Our friends at the Common Counter Press at Glass House will be kindly stocking copies for you to purchase ahead of the book club meeting. Tell them you’re buying the book for Sappho’s book club and you’ll receive a 10% discount. If you can&#39;t physically pick it up, they can post it to you (+ &#163;2.80 for postage) by emailing books@glasshouse.london.Date: Tuesday 22 November, 7-8pmLocation: The Common Press, Glass House, London (118 Bethnal Green Road, London, E2 6DG). The nearest station is Shoreditch High Street OvergroundPrice: &#163;6Please note that Sappho Events welcomes LGBTQIA+ women, trans and non-binary people. x","location": {"@type": "Place","name": "The Common Counter at Glass House","address": { "@type" : "PostalAddress","streetAddress" : "The Common Counter at Glass House, 118 Bethnal Green Road, London, E2 6DG","addressLocality" : "London","addressRegion" : "England","postalCode" : "E2 6DG" },"geo" : {"@type" : "GeoCoordinates", "latitude" : "51.52462", "longitude" : "-0.0720284"} },"offers": {"@type": "AggregateOffer", "availability":"http://schema.org/InStock", "availabilityEnds":"2022-09-14T17:21:42","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10444/queer-book-club-london","lowPrice":6,"highPrice":6,"availabilityStarts":"2022-11-22T19:59:00","offers":[{"availability":"http://schema.org/InStock", "availabilityEnds":"2022-11-22T19:59:00","name":"General Admission","priceCurrency":"GBP","url":"https://www.outsavvy.com/event/10444/queer-book-club-london","price":6,"availabilityStarts":"2022-09-14T17:21:42","validFrom":"2022-09-14T17:21:42","@type":"Offer"}]},"performer" : { "@type" : "Organization", "url" : "https://www.outsavvy.com/organiser/sappho-events", "description" : "Sappho Events produces events for LGBTQ women and non-binary people in the UK. Our events revolve around common interest activities with a coffee and chat vibe. Our social events encourage making new friends and forming connections with other queer people. We also run dating events for queer women and non-binary people, which will be clearly marked.", "name" : "Sappho Events"}}]
    </script>

    <link rel="stylesheet" type="text/css" href="/combres.axd/partnerCss/d93b304ad92d79ae94b5cb657b138709b3a5eeda03307ef550c8db1bff88405b8171db0b69a67a2cc8b295ee2f84e5f0389aa512b324491cdd60abc3d717391b/"/>

    <script type="text/javascript" src="/combres.axd/partnerJs/c76e2048a37532fad14a740cf80291445252fb260e794b0eab257dbbfd3a9fe738ffc98081c66a2d627f3576d39bf7c44fd51b51bd6d5280c7502747e9d612c1/"></script>

    <script type="text/javascript">

        $(document).ready(function () {
            var image2 = $('.partner-header-headerBg img');
            var datasrc = image2.attr('data-src');
            image2.attr('src', datasrc);
            image2.removeAttr('data-src');
        });

        $(function () {

            var items = $("#pasteventscontent div.col-4-mar");

            var numItems = items.length;
            var perPage = 10;

            // only show the first 2 (or "first per_page") items initially
            items.slice(perPage).hide();

            // now setup your pagination
            $("#pagination").pagination({
                items: numItems,
                itemsOnPage: perPage,
                cssStyle: "light-theme",
                onPageClick: function (pageNumber) { // this is where the magic happens

                    // someone changed page, lets hide/show trs appropriately
                    var showFrom = perPage * (pageNumber - 1);
                    var showTo = showFrom + perPage;

                    var newItems = items.slice(showFrom, showTo);

                    items.hide() // first hide everything, then show for the new page
                        .slice(showFrom, showTo).show();
                }
            });

            var checkFragment = function () {
                // if there's no hash, make sure we go to page 1
                var hash = window.location.hash || "#page-1";

                // we'll use regex to check the hash string
                hash = hash.match(/^#page-(\d+)$/);

                if (hash)
                    // the selectPage function is described in the documentation
                    // we've captured the page number in a regex group: (\d+)
                    $("#pagination").pagination("selectPage", parseInt(hash[1]));
            };

            // we'll call this function whenever the back/forward is pressed
            $(window).bind("popstate", checkFragment);

            // and we'll also call it to check right now!
            checkFragment();
        });

    </script>



        <script type="text/javascript" src="/combres.axd/extraJs/ffa4dccb66a0ff8aac42ee6de56e78c0a46d4ebb4c322c70fa86a2032aaa471b7db0089a9a421bde8e9be3591df08a6bbdbf78aca33c67d3a6f50ea4b66b0e42/"></script>

        <link rel="stylesheet" type="text/css" href="/combres.axd/extraCss/ac6b95ee22403703e148b8589138492dddf292ce318be635ec82307832951f79ac45fafc48da6bcd149a77af803bdddae6d6339feb4025652023c092b6cdb107/"/>

        <script type="text/javascript">

            if (typeof (Sys) !== 'undefined') {

                var prm = Sys.WebForms.PageRequestManager.getInstance();

                prm.add_endRequest(function () {

                    $('[title]').tooltip({
                        content: function () {
                            return $(this).attr('title');
                        }
                    });

                });
            }

        </script>

        <link href="https://fonts.googleapis.com/css?family=Cabin:400,500,600,700|Rubik:500,700&display=swap" rel="stylesheet" />

        <!-- intersection observer polyfill -->
        <script type="text/plain" data-categories="essential" src="https://polyfill.io/v3/polyfill.min.js?features=IntersectionObserver"></script>

        <script type="text/javascript">

            $(function () {
                $('[title]').tooltip({
                    content: function () {
                        return $(this).attr('title');
                    }
                });
            });

            $(document).ready(function () {

                var images = document.querySelectorAll('.lazy');

                var options = {
                    // If the image gets within 50px in the Y axis, start the download.
                    root: null, // Page as root
                    rootMargin: '100px 100px 100px 100px',
                    threshold: 0
                };

                var fetchImage = (url) => {
                    return new Promise((resolve, reject) => {
                        var image = new Image();
                        image.src = url;
                        image.onload = resolve;
                        image.onerror = reject;
                    });
                }

                var loadImage = (image) => {
                    var src = image.dataset.src;
                    var fetch = fetchImage(src);
                    fetchImage(src).then(() => {
                        image.src = src;
                    })
                }

                var handleIntersection = (entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.intersectionRatio > 0) {
                            loadImage(entry.target)
                        }
                    })
                }

                // The observer for the images on the page
                var observer = new IntersectionObserver(handleIntersection, options);

                images.forEach(img => {
                    observer.observe(img);
                })

            });

        </script>

        <!-- Global site tag (gtag.js) - Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-36448471-1" type="text/plain" data-categories="analytics"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag() { dataLayer.push(arguments); }
            gtag('js', new Date());

            gtag('config', 'UA-36448471-1');
        </script>

    </form>
</body>
</html>

    recorded_at: Wed, 26 Oct 2022 16:04:41 GMT
recorded_with: VCR 6.1.0
