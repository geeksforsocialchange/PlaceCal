---
http_interactions:
  - request:
      method: get
      uri: https://api.meetup.com/haeKohtheuwae7uY6sie/events
      body:
        encoding: US-ASCII
        string: ""
      headers:
        Accept-Encoding:
          - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
        Accept:
          - "*/*"
        User-Agent:
          - Ruby
    response:
      status:
        code: 504
        message: Bad Gateway
      headers:
        Connection:
          - keep-alive
        Content-Length:
          - "101"
        Content-Type:
          - application/html; charset=utf-8
        X-Oauth-Scopes:
          - basic
        X-Accepted-Oauth-Scopes:
          - basic
        X-Ratelimit-Limit:
          - "30"
        X-Ratelimit-Remaining:
          - "29"
        X-Ratelimit-Reset:
          - "10"
        Etag:
          - '"81974ed1f846f7bb66a198e756391d5a-gzip"'
        Accept-Ranges:
          - bytes
        Date:
          - Thu, 20 Oct 2022 09:41:10 GMT
        Vary:
          - Accept-Encoding,User-Agent,Accept-Language
        X-Geo-Service-Region:
          - east
      body:
        encoding: ASCII-8BIT
        string: |
          <html>
          <head><title>504 Gateway Time-out</title></head>
          <body>
          <center><h1>504 Gateway Time-out</h1></center>
          </body>
          </html>
    recorded_at: Thu, 20 Oct 2022 09:41:09 GMT
  - request:
      method: get
      uri: https://www.meetup.com/haeKohtheuwae7uY6sie
      body:
        encoding: US-ASCII
        string: ""
      headers:
        Accept-Encoding:
          - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
        Accept:
          - "*/*"
        User-Agent:
          - Ruby
    response:
      status:
        code: 302
        message: Found
      headers:
        Connection:
          - close
        Content-Length:
          - "0"
        Retry-After:
          - "0"
        Set-Cookie:
          - MEETUP_BROWSER_ID=id=be165d3e-ad8f-4df1-b2a9-79eebcd86475; expires=Wed, 14
            Jan 2043 12:11:44 GMT; path=/; domain=.meetup.com; SameSite=None; Secure
          - _cookie-check=yXXYA9IZ9NKZO141; expires=Tue, 18 Jul 2023 12:11:44 GMT; path=/;
            domain=.meetup.com; SameSite=Strict; HttpOnly; Secure
        Location:
          - https://www.meetup.com/haeKohtheuwae7uY6sie?_cookie-check=yXXYA9IZ9NKZO141
        Accept-Ranges:
          - bytes
        Date:
          - Thu, 19 Jan 2023 12:11:44 GMT
        X-Cache:
          - HIT
        X-Cache-Hits:
          - "0"
        Cache-Control:
          - private, no-cache, no-store, max-age=0, must-revalidate
        X-Geo:
          - east
        X-Geo-Gql-Beta:
          - east
        Content-Security-Policy:
          - "base-uri 'self'; connect-src * blob: data: ; default-src 'self' *.meetup.com
            *.dev.meetup.com:8001 www.sjwoe.com; font-src * data:; frame-ancestors 'self';
            frame-src *; img-src * data: blob: ;media-src *.meetup.com *.dev.meetup.com:8001
            www.sjwoe.com *.sendbird.com https://sendbird-us-3.s3.amazonaws.com;script-src
            * 'unsafe-eval' 'unsafe-inline'; style-src * 'unsafe-inline'; object-src
            'none'"
        X-Frame-Options:
          - SAMEORIGIN
        X-Xss-Protection:
          - 1; mode=block
        X-Content-Type-Options:
          - nosniff
        Content-Type:
          - text/html; charset=utf-8
        Strict-Transport-Security:
          - max-age=7776000
      body:
        encoding: UTF-8
        string: ""
    recorded_at: Tue, 08 Nov 2022 00:00:00 GMT
  - request:
      method: get
      uri: https://www.meetup.com/haeKohtheuwae7uY6sie?_cookie-check=yXXYA9IZ9NKZO141
      body:
        encoding: US-ASCII
        string: ""
      headers:
        Cookie:
          - _cookie-check=yXXYA9IZ9NKZO141; MEETUP_BROWSER_ID=id=be165d3e-ad8f-4df1-b2a9-79eebcd86475
        Accept-Encoding:
          - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
        Accept:
          - "*/*"
        User-Agent:
          - Ruby
    response:
      status:
        code: 301
        message: Moved Permanently
      headers:
        Connection:
          - keep-alive
        Content-Length:
          - "252"
        Content-Type:
          - text/html; charset=iso-8859-1
        Location:
          - https://www.meetup.com/haeKohtheuwae7uY6sie/
        Accept-Ranges:
          - bytes
        Date:
          - Thu, 19 Jan 2023 12:11:44 GMT
        X-Cache:
          - MISS
        X-Cache-Hits:
          - "0"
        Cache-Control:
          - private, no-cache, no-store, max-age=0, must-revalidate
        X-Geo:
          - east
        X-Geo-Gql-Beta:
          - east
        Content-Security-Policy:
          - "base-uri 'self'; connect-src * blob: data: ; default-src 'self' *.meetup.com
            *.dev.meetup.com:8001 www.sjwoe.com; font-src * data:; frame-ancestors 'self';
            frame-src *; img-src * data: blob: ;media-src *.meetup.com *.dev.meetup.com:8001
            www.sjwoe.com *.sendbird.com https://sendbird-us-3.s3.amazonaws.com;script-src
            * 'unsafe-eval' 'unsafe-inline'; style-src * 'unsafe-inline'; object-src
            'none'"
        X-Frame-Options:
          - SAMEORIGIN
        X-Xss-Protection:
          - 1; mode=block
        X-Content-Type-Options:
          - nosniff
        Strict-Transport-Security:
          - max-age=7776000
      body:
        encoding: UTF-8
        string: |
          <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
          <html><head>
          <title>301 Moved Permanently</title>
          </head><body>
          <h1>Moved Permanently</h1>
          <p>The document has moved <a href="https://www.meetup.com/haeKohtheuwae7uY6sie/">here</a>.</p>
          </body></html>
    recorded_at: Tue, 08 Nov 2022 00:00:00 GMT
  - request:
      method: get
      uri: https://www.meetup.com/haeKohtheuwae7uY6sie/
      body:
        encoding: US-ASCII
        string: ""
      headers:
        Cookie:
          - _cookie-check=yXXYA9IZ9NKZO141; MEETUP_BROWSER_ID=id=be165d3e-ad8f-4df1-b2a9-79eebcd86475
        Accept-Encoding:
          - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
        Accept:
          - "*/*"
        User-Agent:
          - Ruby
    response:
      status:
        code: 404
        message: Not Found
      headers:
        Connection:
          - keep-alive
        Content-Type:
          - text/html;charset=UTF-8
        P3p:
          - CP="CAO DSP LAW CUR DEVa TAIa PSAi PSDi OTPi OUR IND UNI NAV DEM STA LOC OTC"
        Pragma:
          - No-cache
        Cache-Control:
          - no-cache
        Expires:
          - "0"
        Content-Language:
          - en-US
        Set-Cookie:
          - MEETUP_AFFIL=affil=meetup; Version=0; Path=/; Domain=.meetup.com; Expires=Sun,
            05-Mar-2023 12:11:45 GMT; Secure; HttpOnly; SameSite=None
          - MEETUP_CSRF=1494cd71-73ea-498f-bcd4-03b0002fb031; Version=0; Path=/; Domain=.meetup.com;
            Expires=Sat, 18-Feb-2023 12:11:45 GMT; Secure; SameSite=Strict
          - MEETUP_MEMBER=id=0&status=1&timestamp=1674130305&bs=0&tz=US%2FEastern&zip=&country=us&city=&state=&lat=0.0&lon=0.0&ql=false&s=375e9269a7c66b062da07e49d5563fd8382dbc14&scope=ALL;
            Version=0; Path=/; Domain=.meetup.com; Secure; HttpOnly; SameSite=None
          - MEETUP_TRACK=id=07d6d3b3-f60d-424e-801d-7ed5a40ab2ae&l=0&s=df4a73eefce03e31bdf3b309c2f126162b984220;
            Version=0; Path=/; Domain=.meetup.com; Expires=Wed, 14-Jan-2043 12:11:45 GMT;
            Secure; HttpOnly; SameSite=None
          - gaEncryptedMemberId=""; Version=1; Path=/; Domain=.meetup.com; Expires=Thu,
            01-Jan-1970 00:00:00 GMT; Max-Age=0; Secure; SameSite=Lax
          - memberId=""; Version=1; Path=/; Domain=.meetup.com; Expires=Thu, 01-Jan-1970
            00:00:00 GMT; Max-Age=0; Secure; SameSite=Lax
          - memberId=0; Version=0; Path=/; Domain=.meetup.com; Secure; SameSite=Lax
        Accept-Ranges:
          - bytes
        Date:
          - Thu, 19 Jan 2023 12:11:45 GMT
        X-Cache:
          - MISS
        X-Cache-Hits:
          - "0"
        Vary:
          - Accept-Encoding,User-Agent,Accept-Language
        X-Geo:
          - east
        X-Geo-Gql-Beta:
          - east
        Content-Security-Policy:
          - "base-uri 'self'; connect-src * blob: data: ; default-src 'self' *.meetup.com
            *.dev.meetup.com:8001 www.sjwoe.com; font-src * data:; frame-ancestors 'self';
            frame-src *; img-src * data: blob: ;media-src *.meetup.com *.dev.meetup.com:8001
            www.sjwoe.com *.sendbird.com https://sendbird-us-3.s3.amazonaws.com;script-src
            * 'unsafe-eval' 'unsafe-inline'; style-src * 'unsafe-inline'; object-src
            'none'"
        X-Frame-Options:
          - SAMEORIGIN
        X-Xss-Protection:
          - 1; mode=block
        X-Content-Type-Options:
          - nosniff
        Strict-Transport-Security:
          - max-age=7776000
        Transfer-Encoding:
          - chunked
      body:
        encoding: ASCII-8BIT
        string: !binary |-
          
    recorded_at: Tue, 08 Nov 2022 00:00:00 GMT
recorded_with: VCR 6.1.0
